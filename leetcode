#最长回文子串
#描述：给定一个字符串s，找到s中最长的回文子串。你可以假设s的最大长度为1000。
#思路：马拉车算法（动态规划问题）https://blog.csdn.net/HappyRocking/article/details/82622881
class Solution:
    def longestPalindrome(self, s: str) -> str:
        if len(s) <= 1:
            return s
        #'连接符'.join(x for x in s)。join函数()必须是一个序列，不知道要连接多少个parts的时候，用for。
        ss = '\0\1' + '\1'.join([x for x in s]) + '\1\2'
        p = [0] * len(ss)
        center = 0
        mx = 0
        result = ''
        
        for i in range(1, len(p)-1):
            if i < mx:
                p[i] = min(p[2 * center - i], mx - i)
            
            while ss[i + p[i] + 1] == ss[i - p[i] - 1]:
                p[i] += -1
            
            if i + p[i] > mx:
                mx = i + p[i]
                center = i
            
            if 2 * p[i] + 1 > len(result):
                result = ss[i - p[i] : i + p[i] + 1]
        return result.replace('\1', '')
        
        
        
#最长回文串
#给定一个包含大写字母和小写字母的字符串，找到通过这些字母构造成的最长的回文串。在构造过程中，请注意区分大小写。比如 "Aa" 不能当做一个回文字符串。
class Solution:
    def longestPalindrome(self, s: str) -> int:
        if len(s) <= 1:
            return len(s)
        
        temp = 0
        count = 0
        #把字符串s每个字符分开形成list,直接用list()函数。如果想用s.split('')是不对的，因为分割的符号不能是空的''。
        ss = list(s)
        #把list变为集合，删除重复的字符。
        sss = set(ss)
        #创建字典的方法：当不确定字典key的个数，可以用for循环
        dic = {i : 0 for i in sss}
        for i in s:
            dic[i] += 1
        #//表示整除，/是浮点数除法
        for i in sss:
            temp += (dic[i] // 2) * 2
            count += dic[i] % 2

        if count == 0:
            return temp
        else:
            return temp + 1
            
            
#验证回文串
#给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。
class Solution:
    def isPalindrome(self, s: str) -> bool:
        letter1 = 'abcdefghijklmnopqrstuvwxyz'
        letter2 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
        numbers = '0123456789'
        combo = letter1 + letter2 + numbers
        #A:replace函数只是展现出替换之后的样子，不返回替换后的结果，和[::-1]类似。
        #B:replace函数可以选择替换的次数。
        #index和find只能用于字符串查找，但是index找不到返回异常值，find找不到返回-1，所以find更好用一点。
        for i in s:
            if i not in combo:
                s = s.replace(i, '')
            if i in letter2:
                a = letter2.index(i)
                s = s.replace(i, letter1[a])       
                
        if s == s[::-1]:
            return True
        else:
            return False


#找到K个最接近的元素leetcode658
#给定一个排序好的数组，两个整数 k 和 x，从数组中找到最靠近 x（两数之差最小）的 k 个数。
#返回的结果必须要是按升序排好的。如果有两个数与 x 的差值一样，优先选择数值较小的那个数。
#Q：set()函数，里边必须是hashtable的变量，不可以hashtable的有list, set, dict.
class Solution:
    def findClosestElements(self, arr: List[int], k: int, x: int) -> List[int]:
        result = []
        min_dis = abs(arr[0] - x)
        min = 0
        l = len(arr)
        
        for i in range(1, l):
            if abs(arr[i] - x) < min_dis:
                min_dis = abs(arr[i] - x)
                min = i

        result.append(arr[min])
        k -= 1
        left = min - 1
        right = min + 1
        while k > 0:
            if left < 0:
                result.append(arr[right])
                right += 1
                k -= 1
            elif right > l-1:
                result.append(arr[left])
                left -= 1
                k -= 1
            else:
                if abs(arr[left] - x) > abs(arr[right] - x):
                    result.append(arr[right])
                    right += 1
                    k -= 1
                elif abs(arr[left] - x) < abs(arr[right] - x):
                    result.append(arr[left])
                    left -= 1
                    k -= 1
                elif abs(arr[left] - x) == abs(arr[right] - x):
                    result.append(arr[left])
                    left -= 1
                    k -= 1
        #sort函数不返回值，改变变量自身
        result.sort()
        return result
        
#二分查找leetcode704
#给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。
#时间复杂度是O(N) = log(n)
class Solution:
    def search(self, nums: List[int], target: int) -> int:
        if nums == []:
            return -1
        l = len(nums)
        left = 0
        right = l-1  
        center = (left + right) // 2
        
        while right - left > 1:
            if nums[center] == target:
                return center
            elif nums[center] > target:
                right = center
                center = (left + right) // 2
            elif nums[center] < target:
                left = center
                center = (left + right) // 2
        if nums[left] == target:
            return left
        elif nums[right] == target:
            return right
        else:
            return -1

#山脉序列中的最大值lintcode585
#给 n 个整数的山脉数组，即先增后减的序列，找到山顶（最大值）
class Solution:
    """
    @param nums: a mountain sequence which increase firstly and then decrease
    @return: then mountain top
    """
    def mountainSequence(self, nums):
        # write your code here
        if nums == []:
            return nums
        nums.sort(reverse = True)
        return nums[0]
        
153. 寻找旋转排序数组中的最小值
#假设按照升序排序的数组在预先未知的某个点上进行了旋转。
(例如，数组[0,1,2,4,5,6,7]可能变为 [4,5,6,7,0,1,2])。请找出其中最小的元素。你可以假设数组中不存在重复元素。
#二分法，时间复杂度为log(n)
class Solution:
    def findMin(self, nums: List[int]) -> int:
        l = len(nums)
        if l == 1:
            return nums[0]
        left = 0
        right = l - 1
        mid = (left + right) // 2
        
        while left < right:
            if nums[mid] < nums[right]:
                right = mid
                mid = (left + right) // 2
            elif nums[mid] > nums[right]:
                left = mid + 1
                mid = (left + right) // 2
        return nums[left]
 
154. 寻找旋转排序数组中的最小值 II
假设按照升序排序的数组在预先未知的某个点上进行了旋转。
(例如，数组 [0,1,2,4,5,6,7]可能变为[4,5,6,7,0,1,2]).请找出其中最小的元素。注意数组中可能存在重复的元素。
class Solution:
    def findMin(self, nums: List[int]) -> int:
        l = len(nums)
        if l == 1:
            return nums[0]
        left = 0
        right = l - 1
                
        while left < right:
            mid = (left + right) // 2
            if nums[mid] < nums[right]:
                right = mid
                mid = (left + right) // 2
            elif nums[mid] > nums[right]:
                left = mid + 1
                mid = (left + right) // 2
            else:
                right -= 1
        return nums[left]
        


